platform :ios, '10.0'

require_relative '../node_modules/react-native-unimodules/cocoapods'

target 'hana_readthru' do
  # Pods for hana_readthru
  pod 'React', :path => '../node_modules/react-native', :subspecs => [
    'Core',
    'CxxBridge',
    'DevSupport',
    'RCTActionSheet',
    'RCTAnimation',
    'RCTBlob',
    'RCTGeolocation',
    'RCTImage',
    'RCTLinkingIOS',
    'RCTNetwork',
    'RCTSettings',
    'RCTText',
    'RCTVibration',
  ]
  
#  pod 'React/Core/RCTWebSocket', :path => '../node_modules/react-native'

  pod 'yoga', :path => '../node_modules/react-native/ReactCommon/yoga'

  pod 'DoubleConversion', :podspec => '../node_modules/react-native/third-party-podspecs/DoubleConversion.podspec'
  pod 'glog', :podspec => '../node_modules/react-native/third-party-podspecs/glog.podspec'
  pod 'Folly', :podspec => '../node_modules/react-native/third-party-podspecs/Folly.podspec'
  pod 'RNGestureHandler', :podspec => '../node_modules/react-native-gesture-handler/RNGestureHandler.podspec'
  pod 'RNReanimated', :podspec => '../node_modules/react-native-reanimated/RNReanimated.podspec'
  pod 'RNScreens', :path => '../node_modules/react-native-screens'

  # Required by RNFirebase
  pod 'Firebase/Core', '5.6.0'
  pod 'Firebase/Messaging', '5.6.0'
  
  use_unimodules!
  pod 'RNVectorIcons', :path => '../node_modules/react-native-vector-icons'

  pod 'RNCAsyncStorage', :path => '../node_modules/@react-native-community/async-storage'
 
  pod 'BVLinearGradient', :path => '../node_modules/react-native-linear-gradient'

end

#post_install do |installer|
#  ## Fix for XCode 12.5 beta
#  find_and_replace("../node_modules/react-native/React/CxxBridge/RCTCxxBridge.mm",
#  "_initializeModules:(NSArray<id<RCTBridgeModule>> *)modules", "_initializeModules:(NSArray<Class> *)modules")
#end
#
#def find_and_replace(dir, findstr, replacestr)
#  Dir[dir].each do |name|
#      text = File.read(name)
#      replace = text.gsub(findstr,replacestr)
#      if text != replace
#          puts "Fix: " + name
#          File.open(name, "w") { |file| file.puts replace }
#          STDOUT.flush
#      end
#  end
#  Dir[dir + '*/'].each(&method(:find_and_replace))
#end
